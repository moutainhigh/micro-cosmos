<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">
	

    <!--<bean id="mongoClientWraper" class="com.tairanchina.fd.common.mongo.MongoClientWraper"  destroy-method="cleanup" init-method="init" >-->
    <!--&lt;!&ndash; 主机1：端口1,主机2：端口2... &ndash;&gt;-->
    <!--<property name="hostports" value="${hostports}" />-->
    <!--&lt;!&ndash; 用户名：数据库：密码,用户名：数据库：密码 ... &ndash;&gt;-->
    <!--<property name="credentials" value="${credentials}" />-->
    <!--<property name="connectionsPerHost" value="${connectionsPerHost}" />-->
    <!--<property name="replSetName" value="${replSetName}" />-->
    <!--<property name="databaseName" value="${databaseName}" />-->
<!--</bean>-->

    <!-- 配置线程池,专门给dts推送用的 -->  
    <bean id ="dtsTaskExecutor" class ="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor" >  
     	<property name ="corePoolSize" value ="200" />  
     	<property name ="keepAliveSeconds" value ="30000" />  
     	<property name ="maxPoolSize" value ="200" />  
	    <property name ="queueCapacity" value ="20000" />  
    </bean> 
 	
    <!-- 配置线程池 -->  
    <bean id ="taskExecutor" class ="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor" >  
     	<property name ="corePoolSize" value ="100" />  
     	<property name ="keepAliveSeconds" value ="30000" />  
     	<property name ="maxPoolSize" value ="100" />  
	    <property name ="queueCapacity" value ="20000" />  
    </bean>  
    
    <!-- 专门为巡检留的线程池，该业务场景会一次性放入大量的任务。为避免影响其他业务，故而独立， corePoolSize 不要设太大 比如有100个任务同时跑时，它同时也占用100个数据库连接 -->  
    <bean id ="roundCheckTaskExecutor" class ="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">  
     	<property name ="corePoolSize" value ="30" />  
     	<property name ="keepAliveSeconds" value ="30000" />  
     	<property name ="maxPoolSize" value ="100" />  
	    <property name ="queueCapacity" value ="20000" />  
    </bean>  
 	
 	<!--<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.pool.maxTotal}"/>
		<property name="maxIdle" value="${redis.pool.maxIdle}"/>
		<property name="minIdle" value="${redis.pool.minIdle}"/>
		<property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}"/>
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}"/>
	</bean>
	
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool" destroy-method="destroy">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" />
		<constructor-arg name="host" value="${riskcontrol.redis.host}" />
		<constructor-arg name="port" value="${riskcontrol.redis.port}" />
		<constructor-arg name="timeout" value="${riskcontrol.redis.timeout}" />
		<constructor-arg name="password" value="${riskcontrol.redis.password}" />
		<constructor-arg name="database" value="${riskcontrol.redis.database}" />
	</bean>
	
	<bean id="jedisClient" class="com.txframework.core.redis.JedisClient">
		<property name="jedisPool" ref="jedisPool" />
	</bean>-->

<!--start druid-stat  
	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>

	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
		scope="prototype">
		<property name="patterns">
			<list>
				<value>com.tairanchina.fd.loan.service.impl.*</value>
			</list>
		</property>
	</bean>

	<aop:config proxy-target-class="true">
		<aop:advisor advice-ref="druid-stat-interceptor"
			pointcut-ref="druid-stat-pointcut" />
	</aop:config>
	 end druid-stat -->
	
	
	
		<!-- 定义事务作用范围 -->
	<aop:config>
		 <aop:pointcut id="riskcontrol-transaction" expression="execution (* com.xunyi.cloud.wisdom.activiti.service.impl.*.*(..))" />
		 <aop:advisor advice-ref="txAdvice" pointcut-ref="riskcontrol-transaction"  order="1"/>
	</aop:config>
	 

	<!-- 开启声明式事务机制 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!--<tx:method name="mergeApplyInfo2UserInfo" propagation="REQUIRES_NEW" />-->
			<tx:method name="add*"    propagation="REQUIRED" />
			<tx:method name="save*"   propagation="REQUIRED" />
			<tx:method name="del*"    propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="*WithTx" propagation="REQUIRED" />
			<!--<tx:method name="autoSubmitCredit4KDQB" propagation="NOT_SUPPORTED" />
			<tx:method name="submitCredit4KDQB" propagation="NOT_SUPPORTED" />
			<tx:method name="submitInstallment" propagation="NOT_SUPPORTED" />
			<tx:method name="submitApply" propagation="NOT_SUPPORTED" />
			<tx:method name="roundCheckExecute" propagation="NOT_SUPPORTED" />
			<tx:method name="roundCheckExecute4Batche" propagation="NOT_SUPPORTED" />
			<tx:method name="addActualScoreItem" propagation="NOT_SUPPORTED" />
			<tx:method name="createDtsClaims" propagation="NOT_SUPPORTED" />
			<tx:method name="createNewDtsClaims" propagation="REQUIRES_NEW"/>
			<tx:method name="triggerCreateCreditRoundCheckPlan" propagation="NOT_SUPPORTED"/>
			<tx:method name="autoFill4RoundCheck" propagation="NOT_SUPPORTED" />
			<tx:method name="createApplyExportExcelFile" propagation="NOT_SUPPORTED" />
			<tx:method name="executeRoundCheck" propagation="NOT_SUPPORTED" />-->
			<!-- 所有方法都请求事务 -->
			<tx:method name="*" propagation="REQUIRED" />
			<!-- <tx:method name="select*" read-only="true" />
			<tx:method name="query*"  read-only="true" />
			<tx:method name="get*"    read-only="true" />
			<tx:method name="verify*" read-only="true" />
			<tx:method name="exist*"  read-only="true" /> -->
		</tx:attributes>
	</tx:advice>
</beans>
